import threading
import time
from collections import Counter

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import ElementClickInterceptedException, TimeoutException
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait

from bs4 import BeautifulSoup

import matplotlib
matplotlib.use("Agg")
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline
import torch

# -------------------------
# --- –°–ë–û–† –î–ê–ù–ù–´–•
# -------------------------
def fetch_page_source(url, max_wait=10, expand=True):
    options = Options()
    options.add_argument("--headless=new")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)
    driver.set_page_load_timeout(30)
    
    try:
        driver.get(url)
    except Exception as e:
        print("Warning loading page:", e)
    
    wait = WebDriverWait(driver, max_wait)

    if expand:
        for _ in range(6):
            try:
                buttons = driver.find_elements(By.XPATH,
                    "//button[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'–µ—â—ë')"
                    " or contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'–µ—â–µ')"
                    " or contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'–ø–æ–∫–∞–∑–∞—Ç—å')]")
                clicked = False
                for b in buttons:
                    try:
                        if b.is_displayed():
                            b.click()
                            clicked = True
                            time.sleep(1)
                    except ElementClickInterceptedException:
                        continue
                if not clicked:
                    break
            except Exception:
                break

    try:
        wait.until(lambda d: len(d.page_source) > 1000)
    except TimeoutException:
        pass

    html = driver.page_source
    driver.quit()
    return html

def extract_reviews(html):
    soup = BeautifulSoup(html, "html.parser")
    candidates = []

    # –ü–æ –∫–ª–∞—Å—Å–∞–º
    for tag in soup.find_all(True, {"class": lambda v: v and ('review' in v.lower() or '–æ—Ç–∑—ã–≤' in v.lower())}):
        txt = tag.get_text(separator="\n").strip()
        if len(txt) >= 40:
            candidates.append(txt)

    # –ü–æ article
    for art in soup.find_all("article"):
        txt = art.get_text(separator="\n").strip()
        if len(txt) >= 40:
            candidates.append(txt)

    # div —Å p
    for div in soup.find_all("div"):
        ps = div.find_all("p")
        if len(ps) >= 1:
            combined = "\n".join([p.get_text().strip() for p in ps])
            if len(combined) >= 40:
                candidates.append(combined)

    # –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    cleaned = []
    seen = set()
    for c in candidates:
        c2 = ' '.join(c.split())
        if len(c2) < 40 or c2 in seen:
            continue
        seen.add(c2)
        cleaned.append(c2)
    return cleaned

def fetch_reviews(url):
    html = fetch_page_source(url)
    return extract_reviews(html)

# -------------------------
# --- –ê–ù–ê–õ–ò–ó
# -------------------------
class SentimentAnalyzer:
    def __init__(self):
        self.device = 0 if torch.cuda.is_available() else -1
        model_name = "cointegrated/rubert-base-cased-nli-threeway"
        self.tokenizer = AutoTokenizer.from_pretrained(model_name)
        self.model = AutoModelForSequenceClassification.from_pretrained(model_name)
        self.pipe = pipeline("text-classification", model=self.model, tokenizer=self.tokenizer, device=self.device, return_all_scores=False)

    def predict(self, text):
        try:
            r = self.pipe(text[:512])
        except Exception:
            return "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
        label = r[0]['label'].lower()
        if "entail" in label:
            return "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π"
        if "contradict" in label:
            return "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π"
        if "neutral" in label:
            return "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
        if label.startswith("label_"):
            idx = int(label.split("_")[1])
            return ["–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π","–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π","–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π"][idx]
        return "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"

    def analyze_batch(self, texts):
        return [self.predict(t) for t in texts]

# -------------------------
# --- –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø
# -------------------------
def final_recommendation(counter: Counter, total: int):
    pos = counter.get("–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π", 0)
    neg = counter.get("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π", 0)
    if total == 0:
        return "–ù–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.", "black"
    pct_pos = pos*100/total
    pct_neg = neg*100/total
    if pct_pos >= 60:
        return f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É ({pct_pos:.0f}% –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö).", "green"
    if pct_neg >= 50 and neg > pos:
        return f"–õ—É—á—à–µ –≤–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è ({pct_neg:.0f}% –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö).", "red"
    return f"–ù–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫ (–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {pct_pos:.0f}%, –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: {pct_neg:.0f}%).", "orange"

# -------------------------
# --- GUI —Å –¥–∏–∑–∞–π–Ω–æ–º
# -------------------------
class App:
    def __init__(self, root):
        self.root = root
        root.title("üé¨ –ù–µ–π—Ä–æ-–ö—Ä–∏—Ç–∏–∫ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞")
        root.geometry("1000x700")
        root.configure(bg="#f0f4f7")

        # –í–µ—Ä—Ö: URL –∏ –∫–Ω–æ–ø–∫–∞
        frame_top = tk.Frame(root, bg="#f0f4f7", pady=10)
        frame_top.pack(side=tk.TOP, fill=tk.X)
        tk.Label(frame_top, text="üîó URL –ö–∏–Ω–æ–ø–æ–∏—Å–∫:", bg="#f0f4f7", font=("Arial", 11, "bold")).pack(side=tk.LEFT, padx=5)
        self.url_var = tk.StringVar()
        self.entry = ttk.Entry(frame_top, textvariable=self.url_var, width=70)
        self.entry.pack(side=tk.LEFT, padx=5)
        self.btn = tk.Button(frame_top, text="–ê–Ω–∞–ª–∏–∑", bg="#4CAF50", fg="white", font=("Arial",10,"bold"),
                             command=self.on_analyze)
        self.btn.pack(side=tk.LEFT, padx=5)

        # –ü–∞–Ω–µ–ª—å
        panel = ttk.Panedwindow(root, orient=tk.HORIZONTAL)
        panel.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –õ–µ–≤—ã–π: –æ—Ç–∑—ã–≤—ã
        left = tk.Frame(panel, bg="#e8f0fe", width=520)
        panel.add(left, weight=1)
        tk.Label(left, text="–û—Ç–∑—ã–≤—ã:", bg="#e8f0fe", font=("Arial",11,"bold")).pack(anchor=tk.W, padx=6, pady=(6,0))
        self.reviews_box = scrolledtext.ScrolledText(left, wrap=tk.WORD, width=60, height=30, bg="#ffffff")
        self.reviews_box.pack(fill=tk.BOTH, expand=True, padx=6, pady=6)

        # –ü—Ä–∞–≤—ã–π: –¥–∏–∞–≥—Ä–∞–º–º–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        right = tk.Frame(panel, bg="#d9e4f5", width=480)
        panel.add(right, weight=0)
        tk.Label(right, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", bg="#d9e4f5", font=("Arial",11,"bold")).pack(anchor=tk.W, padx=6, pady=(6,0))
        self.fig = Figure(figsize=(4.5,3.5), dpi=100)
        self.ax = self.fig.add_subplot(111)
        self.canvas = FigureCanvasTkAgg(self.fig, master=right)
        self.canvas.get_tk_widget().pack(padx=6, pady=6)
        self.rec_label = tk.Label(right, text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ‚Äî", bg="#d9e4f5", font=("Arial",12,"bold"))
        self.rec_label.pack(anchor=tk.W, padx=6, pady=6)

        # –°—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤–æ.")
        tk.Label(root, textvariable=self.status_var, bg="#cfd8dc", anchor=tk.W, relief=tk.SUNKEN).pack(side=tk.BOTTOM, fill=tk.X)

        # –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤ —Ñ–æ–Ω–µ
        self.analyzer = None
        threading.Thread(target=self.load_model, daemon=True).start()

    def load_model(self):
        self.status_var.set("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
        try:
            self.analyzer = SentimentAnalyzer()
            self.status_var.set("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ì–æ—Ç–æ–≤–æ.")
        except Exception as e:
            self.status_var.set(f"–û—à–∏–±–∫–∞: {e}")

    def on_analyze(self):
        url = self.url_var.get().strip()
        if not url:
            messagebox.showwarning("–í–≤–æ–¥", "–í–≤–µ–¥–∏—Ç–µ URL")
            return
        if not url.lower().startswith(("http://","https://")):
            url = "https://" + url
        self.btn.config(state=tk.DISABLED)
        self.status_var.set("–°–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤...")
        threading.Thread(target=self.run_analysis, args=(url,), daemon=True).start()

    def run_analysis(self, url):
        try:
            reviews = fetch_reviews(url)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –æ—Ç–∑—ã–≤—ã: {e}")
            self.btn.config(state=tk.NORMAL)
            self.status_var.set("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞")
            return
        if not reviews:
            messagebox.showinfo("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            self.btn.config(state=tk.NORMAL)
            self.status_var.set("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤")
            return

        while self.analyzer is None:
            time.sleep(0.5)

        labels = self.analyzer.analyze_batch(reviews)
        cnt = Counter(labels)
        rec_text, rec_color = final_recommendation(cnt, len(labels))

        self.root.after(0, lambda: self.update_ui(reviews, labels, cnt, rec_text, rec_color))

    def update_ui(self, reviews, labels, cnt, rec_text, rec_color):
        self.reviews_box.configure(state=tk.NORMAL)
        self.reviews_box.delete("1.0", tk.END)
        for i,(r,l) in enumerate(zip(reviews,labels),1):
            color = {"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π":"green","–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π":"gray","–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π":"red"}.get(l,"black")
            self.reviews_box.insert(tk.END, f"{i}. [{l}]\n", ("tag",))
            self.reviews_box.tag_configure("tag", foreground=color, font=("Arial",10,"bold"))
            self.reviews_box.insert(tk.END, f"{r}\n\n")
        self.reviews_box.configure(state=tk.DISABLED)

        # –î–∏–∞–≥—Ä–∞–º–º–∞
        self.ax.clear()
        labels_pie = []
        sizes = []
        colors_pie = []
        color_map = {"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π":"#4CAF50","–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π":"#9E9E9E","–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π":"#F44336"}
        for lab in ("–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π","–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π","–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π"):
            v = cnt.get(lab,0)
            if v>0:
                labels_pie.append(f"{lab} ({v})")
                sizes.append(v)
                colors_pie.append(color_map.get(lab,"gray"))
        if sizes:
            self.ax.pie(sizes, labels=labels_pie, autopct='%1.0f%%', startangle=90, colors=colors_pie)
            self.ax.axis('equal')
        else:
            self.ax.text(0.5,0.5,"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",ha='center',va='center')
        self.canvas.draw()

        self.rec_label.config(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: " + rec_text, fg=rec_color)
        self.status_var.set(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω: {len(labels)} –æ—Ç–∑—ã–≤–æ–≤.")
        self.btn.config(state=tk.NORMAL)

# -------------------------
# --- –ó–∞–ø—É—Å–∫
# -------------------------
def main():
    root = tk.Tk()
    app = App(root)
    root.mainloop()

if __name__ == "__main__":
    main()
